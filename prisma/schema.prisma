datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address1      String?
  address2      String?
  city          String?
  zip           String?
  state         String?
  country       String?
  favorites     String[]
  accounts      Account[]
  billboards    Billboard[]
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  categories    Category[]
  orders        Order[]
  products      Product[]
  favoritesList Favorite[]
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model Billboard {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  billboardId String?    @unique
  billboard   Billboard? @relation(fields: [billboardId], references: [id])
  parentId    String?
  parent      Category?  @relation("CategoryToChildren", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToChildren")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]

  @@index([name])
  @@index([userId])
  @@index([parentId])
}

model Product {
  id            String           @id @default(cuid())
  name          String
  description   String
  price         Decimal
  isFeatured    Boolean          @default(false)
  isArchived    Boolean          @default(false)
  weightValue   String
  sku           String           @unique
  discount      Decimal
  userId        String
  user          User             @relation(fields: [userId], references: [id])
  categoryId    String
  category      Category         @relation(fields: [categoryId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  orderItems    OrderItem[]
  productImages ProductImages[]
  favorites     Favorite[]
  variants      ProductVariant[]

  @@index([name])
  @@index([sku])
  @@index([categoryId])
  @@index([userId, isArchived])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color   @relation(fields: [colorId], references: [id])
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])
  stock     Int     @default(0)
  price     Decimal

  @@unique([productId, colorId, sizeId])
  @@index([productId, colorId, sizeId])
}

model Color {
  id        String           @id @default(cuid())
  name      String
  value     String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  variants  ProductVariant[]
  OrderItem OrderItem[]

  @@index([name])
  @@index([value])
}

model Size {
  id        String           @id @default(cuid())
  name      String
  value     String           @unique
  type      SizeType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  variants  ProductVariant[]
  OrderItem OrderItem[]

  @@index([name])
  @@index([value])
}

enum SizeType {
  APPAREL
  SHOES
}

model ProductImages {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  orderStatus OrderStatus @default(PENDING)
  totalPrice  Decimal
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  colorId   String
  color     Color?   @relation(fields: [colorId], references: [id])
  sizeId    String
  size      Size?    @relation(fields: [sizeId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId, colorId, sizeId])
}
